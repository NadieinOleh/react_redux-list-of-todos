{"version":3,"sources":["features/filter.ts","features/currentTodo.ts","utils/filterByParameters.ts","features/todos.ts","app/store.ts","app/hooks.ts","features/filterTodo.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterActionType","actions","todo","type","payload","currentTodoReducer","state","action","FilterByParameters","initialState","query","status","setQuery","setStatus","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","filterTodo","filteredTodos","Completed","completed","Active","All","title","toLowerCase","includes","TodoList","dispatch","className","map","id","onClick","setCurrentTodo","TodoFilter","updateQuery","value","filterActions","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","currentUser","setCurrentUser","useEffect","userId","user","findTodo","find","href","name","App","isLoading","setLoading","loadTodo","actionTodos","catch","error","Error","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"6KAEYA,E,sDCeCC,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA4BrCE,EAfY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KACT,QACE,OAAOE,I,iBD/BDN,K,qBAAAA,E,wBAAAA,M,KAeZ,IEjBYQ,EFkCNC,EAAe,CACnBC,MAAO,GACPC,OAAQ,OAiBGV,EApCI,SAACS,GAAD,MAA8B,CAC7CP,KAAMH,EAAiBY,SACvBR,QAASM,IAkCET,EA/BK,SAACU,GAAD,MAAgC,CAChDR,KAAMH,EAAiBa,UACvBT,QAASO,IA8BIG,EAfO,WAGT,IAFXR,EAEU,uDAFKG,EACfF,EACU,uCACV,OAAQA,EAAOJ,MACb,KAAKH,EAAiBY,SACpB,OAAO,2BAAKN,GAAZ,IAAmBI,MAAOH,EAAOH,UACnC,KAAKJ,EAAiBa,UACpB,OAAO,2BAAKP,GAAZ,IAAmBK,OAAQJ,EAAOH,UACpC,QACE,OAAOE,I,QGpBAL,EAtBI,SAACc,GAAD,MAAoC,CACnDZ,KAAM,YACNC,QAASW,IAqBIC,EAfM,WAGP,IAFZV,EAEW,uDAFI,GACfC,EACW,uCACX,MACO,cADCA,EAAOJ,KAGJ,YAAII,EAAOH,SAGXE,GCjBPW,EAAcC,0BAAgB,CAClCC,YAAad,EACbe,OAAQN,EACRC,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,cCfPC,G,YAAoCC,KACpCC,EAAkDC,K,SHJnDrB,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KIKL,IAAMsB,EAEO,SAACxB,GACjB,IAGIyB,EAHIhB,EAAkBT,EAAlBS,MAAOK,EAAWd,EAAXc,OACPV,EAAkBU,EAAlBV,MAIR,OAJ0BU,EAAXT,QAKb,KAAKH,EAAmBwB,UACtBD,EAAgBhB,EAAMK,QAAO,SAAAlB,GAAI,OAAIA,EAAK+B,aAC1C,MACF,KAAKzB,EAAmB0B,OACtBH,EAAgBhB,EAAMK,QAAO,SAAAlB,GAAI,OAAKA,EAAK+B,aAC3C,MACF,KAAKzB,EAAmB2B,IACxB,QACEJ,EAAgBhB,EAIpB,OAAOgB,EAAcX,QAAO,SAAAlB,GAC1B,OAAOA,EAAKkC,MACTC,cACAC,SAAS5B,EAAM2B,mB,OCvBXE,EAAqB,WAChC,IAAMxB,EAAQa,EAAeE,GACvBU,EAAWd,IACXP,EAAcS,GAAe,SAAAtB,GAAK,OAAIA,EAAMa,eAKlD,OACE,wBAAOsB,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACG1B,EAAM2B,KAAI,SAAAxC,GAAI,OACb,qBAAI,UAAQ,OAAZ,UACE,oBAAIuC,UAAU,eAAd,SAA8BvC,EAAKyC,KACnC,oBAAIF,UAAU,eAAd,SACGvC,EAAK+B,WACJ,sBAAMQ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAS,mBAAcvC,EAAK+B,UAC3B,UACA,UAFJ,SAIG/B,EAAKkC,UAGV,oBAAIK,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVtC,KAAK,SACLyC,QAAS,kBA3CA,SAAC1C,GACtBsC,EAASvC,EAAgBC,IA0CE2C,CAAe3C,IAJhC,SAME,sBAAMuC,UAAU,OAAhB,SACE,mBAAGA,UAAS,oBAAevC,EAAKyC,MAAL,OAAYxB,QAAZ,IAAYA,OAAZ,EAAYA,EAAawB,IAAK,SAAW,cAzBpDzC,EAAKyC,aCxB1BG,EAAuB,WAClC,IAAMN,EAAWd,IACXhB,EAAQkB,GAAe,SAAAtB,GAAK,OAAIA,EAAMc,OAAOV,SAC7CC,EAASiB,GAAe,SAAAtB,GAAK,OAAIA,EAAMc,OAAOT,UAE9CoC,EAAc,SAACC,GACnBR,EAASS,EAAuBD,KAOlC,OACE,uBACEP,UAAU,mBACVS,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGX,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRO,MAAOrC,EACP0C,SAAU,gBAdEL,EAcCM,EAAH,EAAGA,OAAH,OAdEN,EAc2BM,EAAON,WAbtDR,EAASS,EAAwBD,KAU3B,UAKE,wBAAQA,MAAM,MAAd,SACGxC,EAAmB2B,MAEtB,wBAAQa,MAAM,SAAd,SACGxC,EAAmB0B,SAEtB,wBAAQc,MAAM,YAAd,SACGxC,EAAmBwB,mBAM5B,oBAAGS,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRtC,KAAK,OACLsC,UAAU,QACVc,YAAY,YACZP,MAAOtC,EACP2C,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBP,EAAYO,EAAON,UAE/C,sBAAMP,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGd/B,GACC,sBACE+B,UAAU,gBACVe,MAAO,CAAEC,cAAejD,EAAmB2B,KAF7C,SAIE,wBACEQ,GAAG,eACH,UAAQ,oBACRxC,KAAK,SACLsC,UAAU,SACVG,QAAS,kBAAMG,EAAY,gBCjE5BW,G,MAAmB,kBAC9B,qBAAKjB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASkB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICbMC,EAAsB,WACjC,MAAsCC,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KACMtD,EAAcS,GAAe,SAAAtB,GAAK,OAAIA,EAAMa,eAC5CJ,EAAQa,EAAeE,GACvBU,EAAWd,IAMjBgD,qBAAU,WDKW,IAACC,ECJhBxD,IDIgBwD,ECHVxD,EAAYwD,ODGiBhB,EAAG,iBAAiBgB,KCH7BT,MAAK,SAACU,GAAD,OAAUH,EAAeG,QAE3D,CAACzD,IAEJ,IAAM0D,EAAW9D,EAAM+D,MAAK,SAAA5E,GAC1B,OAAOA,EAAKyC,MAAL,OAAYxB,QAAZ,IAAYA,OAAZ,EAAYA,EAAawB,OAGlC,OACE,sBAAKF,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEb+B,EAGA,sBAAK/B,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYtB,QAJZ,IAIYA,OAJZ,EAIYA,EAAawB,MAGzB,wBACExC,KAAK,SACLsC,UAAU,SACV,UAAQ,cACRG,QAlCc,WACxBJ,EAASvC,MAkCC,aAAW,SAIf,sBAAKwC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGoC,QADH,IACGA,OADH,EACGA,EAAUzC,QAGb,oBAAGK,UAAU,QAAQ,UAAQ,aAA7B,UACE,wBACEA,UAAS,mBAAsB,OAARoC,QAAQ,IAARA,KAAU5C,UAAY,UAAY,UAD3D,SAGW,OAAR4C,QAAQ,IAARA,KAAU5C,UACP,OACA,YAGL,OAED,mBAAG8C,KAAK,2BAAR,SACGP,EAAYQ,gBArCrB,cAAC,EAAD,QCpBKC,EAAgB,WAC3B,MAAgCV,oBAAS,GAAzC,mBAAOW,EAAP,KAAkBC,EAAlB,KACM3C,EAAWd,IACXP,EAAcS,GAAe,SAAAtB,GAAK,OAAIA,EAAMa,eAE5CiE,EAAW,WACfD,GAAW,GFEexB,EAAY,UECnCO,MAAK,SAAAE,GAAG,OAAI5B,EAAS6C,EAAqBjB,OAC1CkB,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAMD,MAEjBE,SAAQ,kBAAMN,GAAW,OAO9B,OAJAT,qBAAU,WACRU,MACC,IAGD,qCACE,qBAAK3C,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACGyC,EACG,cAAC,EAAD,IACA,cAAC,EAAD,aAKX/D,GAAe,cAAC,EAAD,QC3ChBuE,EAAO,kBACX,cAAC,IAAD,CAAUrE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNsE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.08fc3cad.chunk.js","sourcesContent":["import { Status } from '../types/Status';\n\nexport enum FilterActionType {\n  setQuery = 'query/SET',\n  setStatus = 'status/SET',\n}\n\ntype SetQuery = {\n  type: FilterActionType.setQuery;\n  payload: string;\n};\n\ntype SetStatus = {\n  type: FilterActionType.setStatus;\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQuery => ({\n  type: FilterActionType.setQuery,\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatus => ({\n  type: FilterActionType.setStatus,\n  payload: status,\n});\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\ntype Action = SetQuery | SetStatus;\n\nconst initialState = {\n  query: '',\n  status: 'all' as Status,\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case FilterActionType.setQuery:\n      return { ...state, query: action.payload };\n    case FilterActionType.setStatus:\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setQuery, setStatus };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","export enum FilterByParameters {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype SetActionTodos = {\n  type: 'todos/set';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetActionTodos => ({\n  type: 'todos/set',\n  payload: todos,\n});\n\ntype State = Todo[];\ntype Action = SetActionTodos;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/set':\n\n      return [...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodos };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from '../types/Todo';\nimport { RootState } from '../app/store';\n\nimport { FilterByParameters } from '../utils/filterByParameters';\n\nexport const filterTodo = {\n  getTodos: (state: RootState) => state.todos,\n  getFilteredTodos: (state: RootState) => {\n    const { todos, filter } = state;\n    const { query, status } = filter;\n\n    let filteredTodos: Todo[];\n\n    switch (status) {\n      case FilterByParameters.Completed:\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n      case FilterByParameters.Active:\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n      case FilterByParameters.All:\n      default:\n        filteredTodos = todos;\n        break;\n    }\n\n    return filteredTodos.filter(todo => {\n      return todo.title\n        .toLowerCase()\n        .includes(query.toLowerCase());\n    });\n  },\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { filterTodo } from '../../features/filterTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(filterTodo.getFilteredTodos);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const setCurrentTodo = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr data-cy=\"todo\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={`has-text-${todo.completed\n                ? 'success'\n                : 'danger'}`}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setCurrentTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={`far fa-eye${todo.id === currentTodo?.id ? '-slash' : ''}`} />\n                </span>\n              </button>\n\n            </td>\n          </tr>\n        ))}\n\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\nimport { FilterByParameters } from '../../utils/filterByParameters';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n\n  const updateQuery = (value: string) => {\n    dispatch(filterActions.setQuery(value));\n  };\n\n  const updateStatus = (value: Status) => {\n    dispatch(filterActions.setStatus(value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={({ target }) => updateStatus(target.value as Status)}\n          >\n            <option value=\"all\">\n              {FilterByParameters.All}\n            </option>\n            <option value=\"active\">\n              {FilterByParameters.Active}\n            </option>\n            <option value=\"completed\">\n              {FilterByParameters.Completed}\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={({ target }) => updateQuery(target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: FilterByParameters.All }}\n          >\n            <button\n              id=\"searchButton\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => updateQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { filterTodo } from '../../features/filterTodo';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [currentUser, setCurrentUser] = useState<User>();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(filterTodo.getFilteredTodos);\n  const dispatch = useAppDispatch();\n\n  const removeCurrentTodo = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId).then((user) => setCurrentUser(user));\n    }\n  }, [currentTodo]);\n\n  const findTodo = todos.find(todo => {\n    return todo.id === currentTodo?.id;\n  });\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeCurrentTodo}\n              aria-label=\" \"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {findTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={`has-text-${findTodo?.completed ? 'success' : 'danger'}`}\n              >\n                {findTodo?.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {currentUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { actions as actionTodos } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const [isLoading, setLoading] = useState(true);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodo = () => {\n    setLoading(true);\n\n    getTodos()\n      .then(res => dispatch(actionTodos.setTodos(res)))\n      .catch(error => {\n        throw new Error(error);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    loadTodo();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}